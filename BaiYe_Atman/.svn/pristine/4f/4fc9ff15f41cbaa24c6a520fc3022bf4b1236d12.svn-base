package com.corelib.util;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class BitmapUtil {

    /**
     * 从文件中读取图片
     *
     * @param fullName
     * @return
     */
    public static Bitmap readBitmapFromDisk(String fullName) {
        Bitmap bitmap = null;
        File file = new File(fullName);
        if (file.exists()) {
            try {
                bitmap = BitmapFactory.decodeFile(fullName);
            } catch (OutOfMemoryError ex) {
                LogUtils.e(ex.getMessage());
            }
            if (bitmap == null) {
                file.delete();
            }
        }

        return bitmap;
    }

    /**
     * 将Bitmap 保存到文件中
     *
     * @param b
     * @param strFileName
     */
    public static void savePicToDisk(Bitmap b, String strFileName) {
        if (b != null) {
            FileOutputStream fos = null;
            try {
                fos = new FileOutputStream(strFileName);
                b.compress(Bitmap.CompressFormat.JPEG, 50, fos);
            } catch (IOException e) {
                LogUtils.e(e.getMessage());
            } finally {
                if (fos != null)
                    try {
                        fos.flush();
                        fos.close();
                    } catch (IOException e) {
                        LogUtils.e(e.getMessage());
                    }
            }
        }
    }

    /**
     * 将bitmap 不压缩保持
     *
     * @param b
     * @param strFileName
     */
    public static void savePicNoCompress(Bitmap b, String strFileName) {
        if (b != null) {
            FileOutputStream fos = null;
            try {
                fos = new FileOutputStream(strFileName);
                b.compress(Bitmap.CompressFormat.JPEG, 90, fos);
                fos.flush();
                fos.close();
            } catch (IOException e) {
                LogUtils.e(e.getMessage());
            } finally {
                if (fos != null) {
                    try {
                        fos.flush();
                        fos.close();
                    } catch (IOException e) {
                        LogUtils.e(e.getMessage());
                    }
                }
            }
        }
    }

    public static void saveMyBitmap(String bitName, Bitmap mBitmap) {
        File f = new File(bitName);
        try {
            f.createNewFile();
        } catch (IOException e) {
            LogUtils.e(e.getMessage());
        }
        FileOutputStream fOut = null;
        try {
            fOut = new FileOutputStream(f);
            mBitmap.compress(Bitmap.CompressFormat.PNG, 100, fOut);
        } catch (FileNotFoundException e) {
            LogUtils.e(e.getMessage());
        } finally {
            if (fOut != null) {
                try {
                    fOut.flush();
                    fOut.close();
                } catch (IOException e) {
                    LogUtils.e(e.getMessage());
                }
            }
        }
    }

    public static Bitmap compressImage(Bitmap image, int numKB) {
        ByteArrayOutputStream baos = null;
        ByteArrayInputStream isBm = null;
        try {
            baos = new ByteArrayOutputStream();
            image.compress(Bitmap.CompressFormat.JPEG, 100, baos);//质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中
            int options = 100;
            while (baos.toByteArray().length / 1024 > numKB) {  //循环判断如果压缩后图片是否大于100kb,大于继续压缩
                baos.reset();//重置baos即清空baos
                image.compress(Bitmap.CompressFormat.JPEG, options, baos);//这里压缩options%，把压缩后的数据存放到baos中
                options -= 10;//每次都减少10
            }
            isBm = new ByteArrayInputStream(baos.toByteArray());//把压缩后的数据baos存放到ByteArrayInputStream中
            Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, null);//把ByteArrayInputStream数据生成图片
            return bitmap;
        } catch (Exception e) {
            LogUtils.e(e.getMessage());
        } finally {
            if (baos != null)
                try {
                    baos.close();
                } catch (IOException e) {
                    LogUtils.e(e.getMessage());
                } finally {
                    if (isBm != null)
                        try {
                            isBm.close();
                        } catch (IOException e) {
                            LogUtils.e(e.getMessage());
                        }
                }
        }
        return null;
    }
}
