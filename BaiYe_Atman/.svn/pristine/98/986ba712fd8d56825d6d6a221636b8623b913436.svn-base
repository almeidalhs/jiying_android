package com.atman.baiye.net;

import com.atman.baiye.base.BaiYeBaseApplication;
import com.corelib.net.IHttpInterface;
import com.corelib.net.IVolleyListener;
import com.corelib.util.DeviceUtils;
import com.corelib.util.PackageInfoUtil;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by loyee on 15-12-18.
 */
public class DataManager {
    private IHttpInterface mHttpRequest = null;
    private IVolleyListener mListener = null;

    public DataManager(IHttpInterface httpRequest, IVolleyListener listener) {
        mHttpRequest = httpRequest;
        mListener = listener;
    }

    private void request(String api, Map<String, Object> p, Class clazz) {
        mHttpRequest.sendHttpRequest(getCmpApi(api), getBaseHashMap(p, api), clazz, mListener);
    }

    private void request(String api, Map<String, Object> p, Class clazz, boolean showloding) {
        mHttpRequest.sendHttpRequest(getCmpApi(api), getBaseHashMap(p, api), clazz, showloding, mListener);
    }

    private void requestnot(String api, Map<String, Object> p, Class clazz, boolean showloding) {
        mHttpRequest.sendHttpRequest(getCmpApi(api), getBaseHashMap(p, api), clazz, showloding, mListener);
    }

    private void request(String api, Class clazz, boolean showloding) {
        mHttpRequest.sendHttpGetRequest(getCmpApi(api), clazz, showloding, mListener);
    }

    private void requestPut(String api, Class clazz, boolean showloding) {
        mHttpRequest.sendHttpPutRequest(getCmpApi(api), clazz, showloding, mListener);
    }

    /**
     * 获取添加默认参数的HashMap
     */
    private Map<String, Object> getBaseHashMap(Map<String, Object> paramsMap, String api) {
        if (BaiYeBaseApplication.mDeviceToken.isEmpty()) {
            paramsMap.put("deviceToken", DeviceUtils.getDeviceId());
        } else {
            paramsMap.put("deviceToken", BaiYeBaseApplication.mDeviceToken);
        }
        paramsMap.put("channel", BaiYeBaseApplication.mChannel);
        paramsMap.put("version", PackageInfoUtil.getVersionName());
        paramsMap.put("deveicType", "Androidzhon");
        paramsMap.put("platform", "Android");
        paramsMap.put("language", "en");
        paramsMap.put("idfa", "i_am_android");
        paramsMap.put("isTestToken", false);
        return paramsMap;
    }

    /**
     * 获取完整Api
     */
    private String getCmpApi(String api) {
        return Urls.RWH_HOST + api;
    }


    /**
     *  登录接口
     *
     * @param userName   账号
     * @param password     登录密码
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void login(String userName, String password, Class clazz, boolean showLoading) {
        Map<String, Object> p = new HashMap<>();
        p.put("userName", userName);
        p.put("password", password);
        request(Urls.LOGIN, p, clazz, showLoading);
    }

    /**
     *  发送验证码接口
     *
     * @param phonenumber 手机号
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void seedMessage(String phonenumber, Class clazz, boolean showLoading) {
        request(Urls.SEED_MEESAGE+phonenumber+Urls.SEED_MEESAGE_AFTER, clazz, showLoading);
    }

    /**
     *  发送验证码接口
     *
     * @param phonenumber 手机号
     * @param code        验证码
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void codeCheck(String phonenumber, String code, Class clazz, boolean showLoading) {
        requestPut(Urls.CODE_CHECK + phonenumber + "/" + code, clazz, showLoading);
    }

    /**
     *  注册接口
     *
     * @param userName   账号
     * @param password     登录密码
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void register(String userName, String password, String avatarUrl, Class clazz, boolean showLoading) {
        Map<String, Object> p = new HashMap<>();
        p.put("userName", userName);
        p.put("password", password);
        p.put("nickName", userName);
        p.put("avatarUrl", avatarUrl);
        p.put("gender", "0");
        p.put("userLabel", "label1 label2");
        request(Urls.REGISTER, p, clazz, showLoading);
    }

    /**
     *  上传头像
     *
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void upHeadImg( Class clazz, boolean showLoading) {
        Map<String, Object> p = new HashMap<>();
        request(Urls.UP_HEADIMG, p, clazz, showLoading);
    }

    /**
     *  发送验证码接口--忘记密码
     *
     * @param phonenumber 手机号
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void seedMessageForgotPwd(String phonenumber, Class clazz, boolean showLoading) {
        request(Urls.SEED_MEESAGE+phonenumber+Urls.SEED_MEESAGE_AFTER_FORGOT, clazz, showLoading);
    }

    /**
     *  重新设置密码
     *
     * @param phonenumber 手机号
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void seedMessageForgotPwd(String phonenumber, String password , Class clazz, boolean showLoading) {
        request(Urls.FORGOT+phonenumber+"/"+password, clazz, showLoading);
    }

    /**
     *  获取商铺信息
     *
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void getShopInformation(Class clazz, boolean showLoading) {
        request(Urls.SHOP_INFORMATION, clazz, showLoading);
    }

    /**
     *  获取行业类型
     *
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void getIndustryType(Class clazz, boolean showLoading) {
        request(Urls.GET_INDSTRY_TRPE, clazz, showLoading);
    }

    /**
     *  创建店铺
     *
     * @param storeName     店铺名
     * @param scId     行业id
     * @param storeBanner     店铺背景
     * @param storeAddress     店铺地址
     * @param storeTel     店铺电话
     * @param description     店铺简介
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void createShop(String storeName, int scId, String storeBanner
            ,String storeAddress,String storeTel, String description,Class clazz, boolean showLoading) {
        Map<String, Object> p = new HashMap<>();
        p.put("storeName", storeName);
        p.put("scId", scId);
        p.put("storeBanner", storeBanner);
        p.put("storeAddress", storeAddress);
        p.put("storeTel", storeTel);
        p.put("description", description);
        requestnot(Urls.CREATE_SHOP, p, clazz, showLoading);
    }

    /**
     *  更新店铺信息
     *
     * @param id   id
     * @param storeName     店铺名
     * @param scId     行业id
     * @param storeBanner     店铺背景
     * @param storeAddress     店铺地址
     * @param storeTel     店铺电话
     * @param description     店铺简介
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void updateShop(int id, String storeName, int scId, String storeBanner
            ,String storeAddress,String storeTel, String description,Class clazz, boolean showLoading) {
        Map<String, Object> p = new HashMap<>();
        p.put("id", id);
        p.put("storeName", storeName);
        p.put("scId", scId);
        p.put("storeBanner", storeBanner);
        p.put("storeAddress", storeAddress);
        p.put("storeTel", storeTel);
        p.put("description", description);
        requestnot(Urls.UPDATE_SHOP, p, clazz, showLoading);
    }

    /**
     *  修改密码接口
     *
     * @param oldPW       旧密码
     * @param newPW       新密码
     * @param clazz       返回Gson对象
     * @param showLoading 是否显示对话框
     **/
    public void resetPassWord(String oldPW, String newPW, Class clazz, boolean showLoading) {
        requestPut(Urls.RESET_PASSWORD + oldPW + "/" + newPW, clazz, showLoading);
    }
}
